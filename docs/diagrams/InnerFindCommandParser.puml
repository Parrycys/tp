@startuml
participant ":FindCommandParser" as FindParser
participant " <<class>>\nArgumentMultiMap" as Map
participant "a:ArgumentMultiMap" as MapInstance
participant "p:NameContainsKeywordPredicate" as Predicate
participant "f:FindCommand" as Find

-> FindParser: parse("n/John")
activate FindParser
FindParser -> Map: tokenize("n/John", "n/", "p/", "r/", "t/")
activate Map
create MapInstance
Map -> MapInstance
activate MapInstance
MapInstance -> Map
Map --> FindParser: a
deactivate Map

loop for prefix in prefixes

ref over FindParser, MapInstance: [find if prefix is present]

end

alt only one prefix present

ref over FindParser, MapInstance: [find if prefix "n/" is present]

alt prefix "n/" is present

FindParser -> MapInstance: getAllValues("n/")
MapInstance --> FindParser: ["John"]
destroy MapInstance
deactivate MapInstance
create Predicate
FindParser -> Predicate: NameContainsKeywordPredicate(["John"])
activate Predicate
Predicate --> FindParser
deactivate Predicate
create Find
FindParser -> Find: FindCommand(p)
activate Find
Find --> FindParser:
deactivate Find
<-- FindParser: f
else exception
<-- FindParser: ParseException
deactivate FindParser

end

end
@enduml
